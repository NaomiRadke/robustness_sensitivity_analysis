install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
.libPaths()
install.packages("ggplot2")
install.packages("knitr")
traceback()
install.packages("shiny")
library("shiny")
install.packages("TapeR")
library(TaperR)
library(TapeR)
?TapeR
rm(list=ls())
k = 0.694614
p = 0.0862735
q = 0.135984
r = dbh/2
dbh = c(7:30)# diameter of diameters at breast height
i = k*dbh
H = c(11.63590383,
13.08553379,
14.29547995,
15.31596808,
16.18589136,
16.93498741,
17.58604689,
18.15668046,
18.66063857,
19.10877637,
19.50975687,
19.8705658,
20.19689173,
20.49340934,
20.76399298,
21.01187904,
21.23979089,
21.45003584,
21.64458113,
21.8251139,
21.9930891,
22.14976788,
22.29624865,
22.43349244) # vector with total tree heights of a certain dbh
h = H/2# height at which we want the diameter
u = (i/(1-exp(q*(1.3-H)))) + ((dbh/2)-i)*(1-(1/(1-exp(p*(1.3-H)))))
v = (((dbh/2)-i)*exp(p*1.3))/(1-exp(p*(1.3-H)))
w = (i*exp(-q*H))/(1-exp(q*(1.3-H)))
dbh_mid = 2*(u+v*exp(-p*h)-w*exp(q*h))
dbh_mid
install.packages("dplyr")
RMSE_param_best <- RMSE_param_new %>% filter(RMSE < 12)
installed.packages("knitr")
install.packages("knitr")
updateR()
install.packages("knitr")
update.packages(ask = FALSE, repos = 'https://cran.rstudio.org')
update.packages(ask = FALSE, repos = 'https://cran.rstudio.org')
install.packages("knitr")
install.packages('knitr', repos = c('https://xran.yihui.name', 'https://cran.rstudio.org'))
RMSE_param_best <- RMSE_param_new %>% filter(RMSE < 12)
install.packages("tidyverse")
installed.packages("knitr")
library(knitr)
RMSE_param_best <- RMSE_param_new %>% filter(RMSE < 12)
install.packages("dplyr")
installed.packages("dplyr")
library("dplyr")
install.packages("dplyr")
.libPaths()
install.packages("knitr")
library(knitr)
install.packages("dplyr")
library(dplyr)
.rs.restartR()
rm(list=ls())
dev.off()
installed.packages(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("tidyverse")
library(tidyverse)
install.packages("broom")
library(tidyverse)
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
library(tidyverse)
update.packages()
y
library(dplyr)
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages("installr")
require(installr)
install.packages("stringr")
require("installr")
library("stringr")
library(installr)
library(stringr)
.libPaths()
?install.packages()
install.packages("installr", C:\Program Files\R\R-3.3.3\library)
library(installr)
library(installr)
library(installr)
library(tidyverse)
packages <- installed.packages()
packages
write.csv(packages, "mypackages.csv" )
getwd()
log(0)
log(-1)
?floor
a <- c(NA, NA, NA)
sum(a)
0/3
library(compiler)
?enableJIT
setwd("~/")
rm(list = ls())
graphics.off()
# Install packages if necessary, and load them.
# install.packages("lhs")
# install.packages("compiler")
library(lhs)
library(compiler)
enableJIT(3)
dir.create("lab_X")
dir.path <- paste(getwd(), "/lab_X/", sep="")
scrim.git.path <- "https://raw.githubusercontent.com/scrim-network/"
scrim.git.path <- "https://raw.githubusercontent.com/scrim-network/"
# Sea-level change data
url <- paste(scrim.git.path, "BRICK/master/data/GMSL_ChurchWhite2011_yr_2015.txt", sep="")
church.data <- read.table("lab_X/GMSL_ChurchWhite2011_yr_2015.txt")
download.file(url, paste(dir.path, "GMSL_ChurchWhite2011_yr_2015.txt", sep=""))
church.data <- read.table("lab_X/GMSL_ChurchWhite2011_yr_2015.txt")
year.hist <- floor(church.data[ ,1])
slr.hist <- church.data[ ,2]
slr.err <- church.data[ ,3]
?floor()
View(church.data)
url <- paste(scrim.git.path,
"Ruckertetal_SLR2016/master/RFILES/Data/NOAA_IPCC_RCPtempsscenarios.csv",
sep="")
download.file(url, paste(dir.path, "NOAA_IPCC_RCPtempsscenarios.csv", sep=""))
temp.data <- read.csv("lab_X/NOAA_IPCC_RCPtempsscenarios.csv")
temp.hist <- temp.data$Historical.NOAA.temp.
?match()
ibeg <- match(year.hist[1], temp.data$Time)
iend <- match(max(year.hist), temp.data$Time)
a <- year.hist[1] %in% temp.data$Time
temp.hist <- temp.hist[ibeg:iend]
ind.norm <- match(1951, year.hist):match(1980, year.hist)
temp.hist <- temp.hist - mean(temp.hist[ind.norm])
temp.hist[ind.norm]
temp.hist
temp.hist <- temp.data$Historical.NOAA.temp.
View(temp.data)
temp.data$Historical.NOAA.temp..respect.to.20th.century
temp.hist <- temp.hist[ibeg:iend]
temp.hist <- temp.data$Historical.NOAA.temp..respect.to.20th.century
temp.hist[ibeg:iend]
temp.hist <- temp.hist[ibeg:iend]
ind.norm <- match(1951, year.hist):match(1980, year.hist)
temp.hist <- temp.hist - mean(temp.hist[ind.norm])
slr.hist <- slr.hist - mean(slr.hist[ind.norm])
ibeg <- match(year.hist[1], temp.data$Time)
iend <- match(2100, temp.data$Time)
temp.proj <- temp.data$Historical.NOAA.temp...RCP.8.5[ibeg:iend]
year.proj <- temp.data$Time[1:match(2100, temp.data$time)]
View(temp.data)
year.proj <- temp.data$Time[1:match(2100, temp.data$Time)]
ind.norm <- match(1951, year.proj):match(1980, year.proj)
temp.proj <- temp.proj - mean(temp.proj[ind.norm])
View(temp.data)
temp.proj <- temp.data$Historical.NOAA.temp...CNRM.RCP.8.5.with.respect.to.20th.century[ibeg:iend]
year.proj <- temp.data$Time[1:match(2100, temp.data$Time)]
ind.norm <- match(1951, year.proj):match(1980, year.proj)
temp.proj <- temp.proj - mean(temp.proj[ind.norm])
url <- paste(scrim.git.path, "BRICK/master/R/gmsl_r07.R", sep="")
download.file(url, paste(dir.path, "gmsl_r07.R", sep=""))
source("lab_X/gmsl_r07.R")
tstep = 1
model0 <- gmsl_r07(sl_temp_sens=3.4, temp_equil=-0.5, sl0=slr.hist[1],
tstep=tstep, temperature_forcing=temp.hist)
url
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
source("lab_X/gmsl_r07.R")
tstep = 1
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
source("lab_X/gmsl_r07.R")
tstep = 1
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
slr.hist[1]
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=-118,
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
source("lab_X/gmsl_r07.R")
model0 <- gmsl_r07(a=3.4, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
plot(year.hist, slr.hist, type='p', col='red', xlab='Year', ylab='Sea level [mm]')
lines(year.hist, model0, lwd=2)
legend(1880, 200, c('Model 0','Data'), lty=c(1,NA),
pch=c(NA,1), col=c('black','red'), bty='n')
model1 <- gmsl_r07(a=3.74, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model1 <- gmsl_r07(a=3.74, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
plot(year.hist, slr.hist, type='p', col='red', xlab='Year', ylab='Sea level [mm]')
lines(year.hist, model1, lwd=2)
legend(1880, 200, c('Model 1','Data'), lty=c(1,NA),
pch=c(NA,1), col=c('black','red'), bty='n')
sens_2013 <- function(parameters, temperature_forcing, tstep=1) {
# Run the GMSL model with the given parameters and forcing
model <- gmsl_r07(a=parameters[1],
Teq=parameters[2],
Sl0=parameters[3],
tstep=tstep,
Tg=temperature_forcing)
# Grab and return the sea level from 2013, the last year
return(model[length(model)])
}
set.seed(11)
n = 10
alphas <- runif(min=0, max=5, n=n)
Teqs <- runif(min=-1.5, max=0.5, n=n)
plot(alphas, Teqs, xlim=c(0,5), ylim=c(-1.5,0.5),
xlab=expression(alpha), ylab=expression(T[eq]))
set.seed(11)
# Draw a Latin hypercube sample with k=2 parameters and n samples
parameters <- randomLHS(k=2, n=n)
# Scale the parameters
alphas <- parameters[,1]*5
Teqs <- parameters[,2]*2 - 1.5
# Make a scatter plot of the parameter samples
plot(alphas, Teqs, xlim=c(0, 5), ylim=c(-1.5, 0.5),
xlab=expression(alpha), ylab=expression(T[eq]))
sens_2013 <- function(parameters, temperature_forcing, tstep=1) {
# Run the GMSL model with the given parameters and forcing
model <- gmsl_r07(a=parameters[1],
Teq=parameters[2],
Sl0=parameters[3],
tstep=tstep,
Tg=temperature_forcing)
# Grab and return the sea level from 2013, the last year
return(model[length(model)])
}
set.seed(11)
# draw parameters
n <- 1000
parameters <- randomLHS(k=2, n=n)
# scale the parameters appropriately
alphas <- parameters[,1] <- parameters[,1]*5
Teqs <- parameters[,2] <- parameters[,2]*2 - 1.5
# create an array to store all of the necessary parameters, including S0
parameters <- cbind(parameters, rep(slr.hist[1], n))
# run the model with Latin hypercube parameters, and calculate sensitivity measure
sens_lhs <- sapply(1:n, function(s) sens_2013(parameters[s,], temp.hist, tstep))
# interpolate the irregular results to a grid
fld <- interp(alphas,Teqs,sens_lhs)
# make a contour plot
contour(fld, xlab=expression(alpha), ylab=expression(T[eq]))
install.packages("interp")
library(interp)
set.seed(11)
# draw parameters
n <- 1000
parameters <- randomLHS(k=2, n=n)
# scale the parameters appropriately
alphas <- parameters[,1] <- parameters[,1]*5
Teqs <- parameters[,2] <- parameters[,2]*2 - 1.5
# create an array to store all of the necessary parameters, including S0
parameters <- cbind(parameters, rep(slr.hist[1], n))
# run the model with Latin hypercube parameters, and calculate sensitivity measure
sens_lhs <- sapply(1:n, function(s) sens_2013(parameters[s,], temp.hist, tstep))
# interpolate the irregular results to a grid
fld <- interp(alphas,Teqs,sens_lhs)
# make a contour plot
contour(fld, xlab=expression(alpha), ylab=expression(T[eq]))
rm(list=ls())
?dataframe.in
?map.range()
?assign()
setwd("~/Step 2_applying OpenMORDM/Case study/climate data")
list.files()
?list.files()
?list.files("/ISIMIP_Data_Jared_stand_cell")
list.files("/ISIMIP_Data_Jared_stand_cell")
setwd("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell")
list.files("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell")
file_names <- c(list.files("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell"))
file_names <- c(list.files("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell")[1:20])
file_names
read.csv()
?read.csv
setwd("~/Step 2_applying OpenMORDM/Case study/climate data")
model_names <- c("gfdl_2.6", "gfdl_4.5", "gfdl_6.0", "gfdl_8.5", "hadgem_2.6", "hadgem_4.5", "hadgem_6.0", "hadgem_8.5", "ipsl_2.6",
"ipsl_4.5", "ipsl_6.0", "ipsl_8.5", "miroc_2.6", "miroc_4.5", "miroc_6.0", "miroc_8.5", "noresm_2.6", "noresm_4.5",
"noresm_6.0", "noresm_8.5") # vector with the model+rcp names to loop through
file_names <- c(list.files("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell")[1:20])
#------ Load data ---------#
for(i in 1:length(model_names)){
model_names[i] <- read.csv(file_names[i], header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
for(i in 1:length(model_names)){
model_names[i] <- read.csv("file_names[i]", header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
stt(file_names)
str(file_names)
for(i in 1:length(model_names)){
model_names[i] <- read.csv(paste("ISIMIP_Data_Jared_stand_cell/, file_names[i]", sep=""), header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
model_names[i] <- read.csv(paste("ISIMIP_Data_Jared_stand_cell/file_names[i]"), header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
model_names[i] <- read.csv(paste("ISIMIP_Data_Jared_stand_cell/"file_names[i]), header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
for(i in 1:length(model_names)){
model_names[i] <- read.csv(paste("ISIMIP_Data_Jared_stand_cell/",file_names[i],sep = ""), header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
model_names[1]
model_names[1]
rm(model_names)
model_names <- c("gfdl_2.6", "gfdl_4.5", "gfdl_6.0", "gfdl_8.5", "hadgem_2.6", "hadgem_4.5", "hadgem_6.0", "hadgem_8.5", "ipsl_2.6",
"ipsl_4.5", "ipsl_6.0", "ipsl_8.5", "miroc_2.6", "miroc_4.5", "miroc_6.0", "miroc_8.5", "noresm_2.6", "noresm_4.5",
"noresm_6.0", "noresm_8.5") # vector with the model+rcp names to loop through
model_names[1]
?read.delim()
?list2env
setwd("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell")
for(i in 1:length(model_names)){
model_names[i] <- read.csv("file_names[i]", header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
file_names <- as.vector(c(list.files("~/Step 2_applying OpenMORDM/Case study/climate data/ISIMIP_Data_Jared_stand_cell")[1:20]))
for(i in 1:length(model_names)){
model_names[i] <- read.csv("file_names[i]", header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
getwd()
for(i in 1:length(model_names)){
"model_names[i]" <- read.csv("file_names[i]", header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)[,1:3]
}
all_csv <- lapply(file_names, read.csv)
rm(all_csv)
all_csv <- lapply(file_names, read.csv, header = TRUE, sep=",",col.names = c("date", "prec", "temp", "Na", "Na"), stringsAsFactors=FALSE)
all_csv[1]
names(all_csv) <- model_names
all_csv[[1]][1]
lapply(all_csv, function(x) as.Date(as.character(all_csv[[x]][1]), "%Y-%m-%d", by="day"))
names(mylist) <-c("2006-01-01","2006-01-02","2006-01-03","2006-01-04","2006-01-05")
mydf <- data.frame(x=c(1:5), y=c(21:25),z=rnorm(1:5))
mylist <- rep(list(mydf),5)
names(mylist) <-c("2006-01-01","2006-01-02","2006-01-03","2006-01-04","2006-01-05")
region <- data.frame(x=c(1:10),y=c(21:30),region=c(1:10))
View(region)
all_csv[,1]
all_csv[,1][[1]]
all_csv[[1]][,1]
fun <- function(x){}
fun <- function(x){as.Date(as.character(all_csv[x][,1], "%Y-%m-%d", by="day"))}
lapply(all_csv, FUN = fun)
fun <- function(x){as.Date(as.character(all_csv[[x]][,1], "%Y-%m-%d", by="day"))}
lapply(all_csv, FUN = fun)
fun <- function(x){as.Date(as.character(x[,1], "%Y-%m-%d", by="day"))}
lapply(all_csv, FUN = fun)
all_csv[[1]]
str(all_csv[[1]][,1])
